//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 0 files.
  struct file {
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 21 images.
  struct image {
    /// Image `add_category_icon`.
    static let add_category_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "add_category_icon")
    /// Image `arrow_icon`.
    static let arrow_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow_icon")
    /// Image `blue_category_icon`.
    static let blue_category_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "blue_category_icon")
    /// Image `difficulty_icon`.
    static let difficulty_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "difficulty_icon")
    /// Image `empty_circle_icon`.
    static let empty_circle_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "empty_circle_icon")
    /// Image `expected_profit_icon`.
    static let expected_profit_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "expected_profit_icon")
    /// Image `filled_circle_icon`.
    static let filled_circle_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "filled_circle_icon")
    /// Image `green_category_icon`.
    static let green_category_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "green_category_icon")
    /// Image `launch_logo`.
    static let launch_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "launch_logo")
    /// Image `light_blue_category_icon`.
    static let light_blue_category_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "light_blue_category_icon")
    /// Image `manage_category_icon`.
    static let manage_category_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "manage_category_icon")
    /// Image `orange_category_icon`.
    static let orange_category_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "orange_category_icon")
    /// Image `pink_category_icon`.
    static let pink_category_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "pink_category_icon")
    /// Image `purple_category_icon`.
    static let purple_category_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "purple_category_icon")
    /// Image `red_category_icon`.
    static let red_category_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "red_category_icon")
    /// Image `required_money_icon`.
    static let required_money_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "required_money_icon")
    /// Image `score_icon`.
    static let score_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "score_icon")
    /// Image `test_image`.
    static let test_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "test_image")
    /// Image `time_to_market_icon`.
    static let time_to_market_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "time_to_market_icon")
    /// Image `white_category_icon`.
    static let white_category_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "white_category_icon")
    /// Image `yellow_category_icon`.
    static let yellow_category_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "yellow_category_icon")
    
    /// `UIImage(named: "add_category_icon", bundle: ..., traitCollection: ...)`
    static func add_category_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.add_category_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "arrow_icon", bundle: ..., traitCollection: ...)`
    static func arrow_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrow_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "blue_category_icon", bundle: ..., traitCollection: ...)`
    static func blue_category_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.blue_category_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "difficulty_icon", bundle: ..., traitCollection: ...)`
    static func difficulty_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.difficulty_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "empty_circle_icon", bundle: ..., traitCollection: ...)`
    static func empty_circle_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.empty_circle_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "expected_profit_icon", bundle: ..., traitCollection: ...)`
    static func expected_profit_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.expected_profit_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "filled_circle_icon", bundle: ..., traitCollection: ...)`
    static func filled_circle_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.filled_circle_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "green_category_icon", bundle: ..., traitCollection: ...)`
    static func green_category_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.green_category_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "launch_logo", bundle: ..., traitCollection: ...)`
    static func launch_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.launch_logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "light_blue_category_icon", bundle: ..., traitCollection: ...)`
    static func light_blue_category_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.light_blue_category_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "manage_category_icon", bundle: ..., traitCollection: ...)`
    static func manage_category_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.manage_category_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "orange_category_icon", bundle: ..., traitCollection: ...)`
    static func orange_category_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.orange_category_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pink_category_icon", bundle: ..., traitCollection: ...)`
    static func pink_category_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pink_category_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "purple_category_icon", bundle: ..., traitCollection: ...)`
    static func purple_category_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.purple_category_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "red_category_icon", bundle: ..., traitCollection: ...)`
    static func red_category_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.red_category_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "required_money_icon", bundle: ..., traitCollection: ...)`
    static func required_money_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.required_money_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "score_icon", bundle: ..., traitCollection: ...)`
    static func score_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.score_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "test_image", bundle: ..., traitCollection: ...)`
    static func test_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.test_image, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "time_to_market_icon", bundle: ..., traitCollection: ...)`
    static func time_to_market_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.time_to_market_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "white_category_icon", bundle: ..., traitCollection: ...)`
    static func white_category_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.white_category_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "yellow_category_icon", bundle: ..., traitCollection: ...)`
    static func yellow_category_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.yellow_category_icon, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 0 nibs.
  struct nib {
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 2 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `categoryCell`.
    static let categoryCell: Rswift.ReuseIdentifier<CategoryTableViewCell> = Rswift.ReuseIdentifier(identifier: "categoryCell")
    /// Reuse identifier `ideaCell`.
    static let ideaCell: Rswift.ReuseIdentifier<IdeaTableViewCell> = Rswift.ReuseIdentifier(identifier: "ideaCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 3 view controllers.
  struct segue {
    /// This struct is generated for `AddIdeaViewController`, and contains static references to 2 segues.
    struct addIdeaViewController {
      /// Segue identifier `showAddCategory`.
      static let showAddCategory: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, AddIdeaViewController, AddCategoryViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showAddCategory")
      /// Segue identifier `showManageCategories`.
      static let showManageCategories: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, AddIdeaViewController, ManageCategoriesTableViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showManageCategories")
      
      /// Optionally returns a typed version of segue `showAddCategory`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showAddCategory(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, AddIdeaViewController, AddCategoryViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.addIdeaViewController.showAddCategory, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showManageCategories`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showManageCategories(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, AddIdeaViewController, ManageCategoriesTableViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.addIdeaViewController.showManageCategories, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `IdeasTableViewController`, and contains static references to 1 segues.
    struct ideasTableViewController {
      /// Segue identifier `createIdeaButtonSegue`.
      static let createIdeaButtonSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, IdeasTableViewController, AddIdeaViewController> = Rswift.StoryboardSegueIdentifier(identifier: "createIdeaButtonSegue")
      
      /// Optionally returns a typed version of segue `createIdeaButtonSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func createIdeaButtonSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, IdeasTableViewController, AddIdeaViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.ideasTableViewController.createIdeaButtonSegue, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `ManageCategoriesTableViewController`, and contains static references to 1 segues.
    struct manageCategoriesTableViewController {
      /// Segue identifier `showAddCategory`.
      static let showAddCategory: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ManageCategoriesTableViewController, AddCategoryViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showAddCategory")
      
      /// Optionally returns a typed version of segue `showAddCategory`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showAddCategory(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ManageCategoriesTableViewController, AddCategoryViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.manageCategoriesTableViewController.showAddCategory, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
      try launchScreen.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "launch_logo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'launch_logo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = CustomNavigationControllerWithGradient
      
      let bundle = R.hostingBundle
      let name = "Main"
      
      static func validate() throws {
        if UIKit.UIImage(named: "score_icon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'score_icon' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "filled_circle_icon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'filled_circle_icon' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "expected_profit_icon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'expected_profit_icon' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "red_category_icon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'red_category_icon' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "time_to_market_icon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'time_to_market_icon' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "arrow_icon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrow_icon' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "required_money_icon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'required_money_icon' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "empty_circle_icon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'empty_circle_icon' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "white_category_icon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'white_category_icon' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "difficulty_icon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'difficulty_icon' is used in storyboard 'Main', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
